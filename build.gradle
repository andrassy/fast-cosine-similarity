buildscript {
  repositories {
    mavenCentral()
    maven {
      name 'sonatype-snapshots'
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    jcenter()
  }
  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:7.2.0"
  }
}

plugins {
  id "me.champeau.gradle.jmh" version "0.4.7"
  id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'

group = 'com.github.staysense'

if (project.hasProperty('projectVersion')) {
  version = project.projectVersion
} else {
  version = '7.2.0'
}

licenseFile = rootProject.file('LICENSE')
noticeFile = rootProject.file('README.md')

ext {
  isIdea = System.getProperty("idea.active") != null || gradle.startParameter.taskNames.contains('idea') || gradle.startParameter.taskNames.contains('cleanIdea')
}

description = "Vector cosine similarity scoring for Elasticsearch"

sourceCompatibility = 1.8
targetCompatibility = 1.8

esplugin {
  name 'fast-cosine-similarity'
  description 'ElasticSearch Plugin for Cosine Similarity'
  classname 'com.staysense.fastcosinesimilarity.FastCosineSimilarityPlugin'
  licenseFile rootProject.file('LICENSE')
  noticeFile rootProject.file('README.md')
}

integTestCluster {
  // numNodes = 2
}

repositories {
//  maven {
    //url 'http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/83f9835'
//  }
}

dependencies {
  testCompile "org.elasticsearch.test:framework:${version}"
  compile "org.elasticsearch:elasticsearch:${version}"
  jmh 'org.eclipse.january:org.eclipse.january:2.1.5'
  jmh ("org.apache.commons:commons-math3:3.6.1") {
    // jmh depends on 3.2, january depends on 3.3.
    force = true
  }
}

// no unit tests
test.enabled = false

// skip license header checks
licenseHeaders.enabled = false
dependencyLicenses.enabled = false

// january fails forbiddenapis
thirdPartyAudit.enabled = false

// IntelliJ
// =============================================================================

if (isIdea) {
  project.buildDir = file('build-idea')
}

idea {
  module {
    inheritOutputDirs = false
    outputDir = file('build-idea/classes/main')
    testOutputDir = file('build-idea/classes/test')

    // also ignore other possible build dirs
    excludeDirs += file('build')
    excludeDirs += file('build-eclipse')

    iml {
      // fix so that Gradle idea plugin properly generates support for resource folders
      // see also https://issues.gradle.org/browse/GRADLE-2975
      withXml {
        it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/main/resources' }.each {
          it.attributes().remove('isTestSource')
          it.attributes().put('type', 'java-resource')
        }
        it.asNode().component.content.sourceFolder.findAll { it.@url == 'file://$MODULE_DIR$/src/test/resources' }.each {
          it.attributes().remove('isTestSource')
          it.attributes().put('type', 'java-test-resource')
        }
      }
    }
  }
}

task cleanIdeaBuildDir(type: Delete) {
  delete 'build-idea'
}
cleanIdeaBuildDir.setGroup("ide")
cleanIdeaBuildDir.setDescription("Deletes the IDEA build directory.")

tasks.cleanIdea.dependsOn(cleanIdeaBuildDir)

idea {
  project {
    vcs = 'Git'
  }
}

release {
    failOnCommitNeeded = false
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['build']
    
    git {
        requireBranch = ''
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = false
        signTag = false
    }
}

// Make sure gradle idea was run before running anything in intellij (including import).
File ideaMarker = new File(projectDir, '.local-idea-is-configured')
tasks.idea.doLast {
  ideaMarker.setText('', 'UTF-8')
}

if (System.getProperty('idea.active') != null && ideaMarker.exists() == false) {
  throw new GradleException('You must run gradle idea from the root of elasticsearch before importing into IntelliJ')
}
